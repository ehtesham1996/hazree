service:
  name: hazree-backend

package:
  individually: true

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: 
      forceExclude:
        - aws-sdk
    excludeFiles: '**/*.test.ts' #Excluding test files in the final build
  prune:
    automatic: true
    number: 3
  cors:
    allowedOrigins : "*"
    allowedHeaders : 
      - "*"

plugins:
  - serverless-offline
  - serverless-webpack
  - serverless-prune-plugin
  - serverless-dotenv-plugin
  
provider:
  name: aws
  runtime: nodejs12.x
  frameworkVersion: ‘1.64.1’
  stage: ${opt:stage, 'dev'} # default sls deploy will deploy to dev
  region: ${opt:region, 'eu-west-2'} # Deployment to be in london
  memorySize: 128 # Lambda function to take default memory of 128 MB only overwrite in function if you need to update
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  deploymentBucket:
    name: com.serverless.hazree.deploys # Change with the project name
    maxPreviousDeploymentArtifacts: 3
  environment:
    ENV: ${self:provider.stage}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
  role: arn:aws:iam::428694752194:role/cloud9-helloWorld-helloRole-1ES8HB9ZW7VZD

functions:
  ping:
    handler: src/api/functions/ping-pong/ping-pong.handler
    events:
      - http:
          method: get
          path: ping
          cors: true
  timesheet-daily:
    handler: src/api/functions/timesheets/timesheet-daily.handler
    events:
      - http:
          method: get
          path: admin/timesheet/daily/{date}
          cors: true
  timesheet-monthly:
    handler: src/api/functions/timesheets/timesheet-monthly.handler
    memorySize: 320
    events:
      - http:
          method: get
          path: admin/timesheet/monthly/{date}
          cors: true
  timesheet-weekly:
    handler: src/api/functions/timesheets/timesheet-weekly.handler
    events:
      - http:
          method: get
          path: admin/timesheet/weekly
          cors: true
  bot:
    handler: src/bot/server.handler
    timeout: 30
    events:
      - http: 
          method: any
          path: bot  
      - http: 
          method: any
          path: bot/{proxy+}
  pre-signup-cognito-trigger:
    handler: src/api/functions/auth/pre-signup-cognito-trigger.handler
    # events:
    #   - cognitoUserPool:
    #       pool: hazree-pool-user-${self:provider.stage}
    #       trigger: PreSignUp
    #       existing: true
  pre-authentication-cognito-trigger:
    handler: src/api/functions/auth/pre-authentication-cognito-trigger.handler

  get-profile:
    handler: src/api/functions/profile/get-profile.handler
    events:
     - http:
          method: get
          path: profile
          cors: 
            origin: ${self:custom.cors.allowedOrigins}
            headers: ${self:custom.cors.allowedHeaders}
          authorizer:
            arn: ${self:provider.environment.COGNITO_USER_POOL_ARN}
  team-get:
    handler: src/api/functions/teams/team-get.handler
    events:
     - http:
          method: get
          path: team
          cors: true
          authorizer:
            arn: ${self:provider.environment.COGNITO_USER_POOL_ARN}
  team-post:
    handler: src/api/functions/teams/team-post.handler
    events:
     - http:
          method: post
          path: team
          cors: true
          authorizer:
            arn: ${self:provider.environment.COGNITO_USER_POOL_ARN}
  team-invitation-get:
    handler: src/api/functions/teams/team-invitation-get.handler
    events:
     - http:
          method: get
          path: team/invitations
          cors: true
          authorizer:
            arn: ${self:provider.environment.COGNITO_USER_POOL_ARN}
  team-invitation-update:
    handler: src/api/functions/teams/team-invitation-update.handler
    events:
     - http:
          method: post
          path: team/invitations
          cors: true
          authorizer:
            arn: ${self:provider.environment.COGNITO_USER_POOL_ARN}
  team-member-get:
    handler: src/api/functions/teams/team-member-get.handler
    events:
     - http:
          method: get
          path: team/members
          cors:
            origin: ${self:custom.cors.allowedOrigins}
            headers: ${self:custom.cors.allowedHeaders}
          authorizer:
            arn: ${self:provider.environment.COGNITO_USER_POOL_ARN}
  team-member-post:
    handler: src/api/functions/teams/team-member-post.handler
    events:
     - http:
          method: post
          path: team/members
          cors:
            origin: ${self:custom.cors.allowedOrigins}
            headers: ${self:custom.cors.allowedHeaders}
          authorizer:
            arn: ${self:provider.environment.COGNITO_USER_POOL_ARN}
  team-member-delete:
    handler: src/api/functions/teams/team-member-delete.handler
    events:
     - http:
          method: delete
          path: team/members
          cors:
            origin: ${self:custom.cors.allowedOrigins}
            headers: ${self:custom.cors.allowedHeaders}
          authorizer:
            arn: ${self:provider.environment.COGNITO_USER_POOL_ARN}

resources:
  Resources:
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId: 
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'